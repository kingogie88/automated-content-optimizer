{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Automated Content Optimizer Documentation","text":"<p>Welcome to the Automated Content Optimizer documentation. This tool provides comprehensive content optimization for both traditional search engines and AI platforms.</p>"},{"location":"#core-features","title":"Core Features","text":""},{"location":"#multi-modal-processing","title":"Multi-Modal Processing","text":"<ul> <li>Video Processing</li> <li>Metadata extraction</li> <li>Key frame detection</li> <li>Audio track separation</li> <li>Format validation</li> <li> <p>Hardware-accelerated processing</p> </li> <li> <p>Audio Processing</p> </li> <li>Metadata extraction</li> <li>Audio segmentation</li> <li>Feature analysis</li> <li>Speech/music detection</li> <li>Format conversion</li> </ul>"},{"location":"#content-optimization","title":"Content Optimization","text":"<ul> <li>Text Analysis</li> <li>Semantic analysis</li> <li>Keyword optimization</li> <li>Readability scoring</li> <li> <p>Structure analysis</p> </li> <li> <p>Media Enhancement</p> </li> <li>Image optimization</li> <li>Video compression</li> <li>Audio normalization</li> <li>Format conversion</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#prerequisites","title":"Prerequisites","text":"<pre><code># System requirements\n- Python 3.9 or higher\n- FFmpeg\n- libsndfile\n\n# For Ubuntu/Debian\nsudo apt-get update\nsudo apt-get install ffmpeg libsndfile1\n\n# For macOS\nbrew install ffmpeg\nbrew install libsndfile\n</code></pre>"},{"location":"#installation","title":"Installation","text":"<pre><code># Clone the repository\ngit clone https://github.com/kingogie88/automated-content-optimizer.git\ncd automated-content-optimizer\n\n# Create virtual environment\npython -m venv .venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n\n# Install dependencies\npip install -r requirements.txt\n</code></pre>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code>from src.core.processors.video_processor import VideoProcessor\nfrom src.core.processors.audio_processor import AudioProcessor\n\n# Initialize processors\nvideo_processor = VideoProcessor()\naudio_processor = AudioProcessor()\n\n# Process video\nvideo_result = await video_processor.process_video(\"path/to/video.mp4\")\n\n# Process audio\naudio_result = await audio_processor.process_audio(\"path/to/audio.wav\")\n</code></pre>"},{"location":"#api-reference","title":"API Reference","text":""},{"location":"#video-processing","title":"Video Processing","text":"<pre><code>async def process_video(video_path: str) -&gt; Dict:\n    \"\"\"\n    Process video file and extract metadata, frames, and audio.\n\n    Args:\n        video_path (str): Path to the video file\n\n    Returns:\n        Dict containing:\n        - metadata: Video metadata\n        - key_frames: List of extracted key frames\n        - audio_path: Path to extracted audio (if present)\n    \"\"\"\n</code></pre>"},{"location":"#audio-processing","title":"Audio Processing","text":"<pre><code>async def process_audio(audio_path: str) -&gt; Dict:\n    \"\"\"\n    Process audio file and extract metadata and features.\n\n    Args:\n        audio_path (str): Path to the audio file\n\n    Returns:\n        Dict containing:\n        - metadata: Audio metadata\n        - features: Extracted audio features\n        - segments: Audio segmentation results\n    \"\"\"\n</code></pre>"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome contributions! Please see our Contributing Guide for details. </p>"},{"location":"contributing/","title":"Contributing Guide","text":"<p>Thank you for considering contributing to the Automated Content Optimizer! This document outlines the process and guidelines for contributing to our project.</p>"},{"location":"contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>Please read and follow our Code of Conduct to keep our community respectful and inclusive.</p>"},{"location":"contributing/#how-to-contribute","title":"How to Contribute","text":"<ol> <li>Fork the Repository</li> <li>Fork the repository on GitHub</li> <li> <p>Clone your fork locally</p> </li> <li> <p>Set Up Development Environment <pre><code># Create and activate virtual environment\npython -m venv .venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n\n# Install development dependencies\npip install -r requirements-dev.txt\n</code></pre></p> </li> <li> <p>Create a Branch <pre><code>git checkout -b feature/your-feature-name\n</code></pre></p> </li> <li> <p>Make Your Changes</p> </li> <li>Write clear, concise commit messages</li> <li>Follow our coding standards</li> <li>Add tests for new features</li> <li> <p>Update documentation as needed</p> </li> <li> <p>Test Your Changes <pre><code># Run tests\npytest tests/\n\n# Check code formatting\nblack .\nflake8 .\nmypy .\n</code></pre></p> </li> <li> <p>Submit a Pull Request</p> </li> <li>Push your changes to your fork</li> <li>Create a pull request from your fork to our main repository</li> <li>Describe your changes in detail</li> <li>Reference any related issues</li> </ol>"},{"location":"contributing/#development-guidelines","title":"Development Guidelines","text":""},{"location":"contributing/#code-style","title":"Code Style","text":"<ul> <li>Follow PEP 8 guidelines</li> <li>Use type hints</li> <li>Write docstrings for all public functions and classes</li> <li>Keep functions focused and concise</li> <li>Use meaningful variable and function names</li> </ul>"},{"location":"contributing/#testing","title":"Testing","text":"<ul> <li>Write unit tests for new features</li> <li>Maintain test coverage above 80%</li> <li>Test edge cases and error conditions</li> <li>Use pytest fixtures and parametrize when appropriate</li> </ul>"},{"location":"contributing/#documentation","title":"Documentation","text":"<ul> <li>Update relevant documentation</li> <li>Add docstrings to new code</li> <li>Include examples for new features</li> <li>Keep README.md up to date</li> </ul>"},{"location":"contributing/#commit-messages","title":"Commit Messages","text":"<p>Follow the conventional commits specification: <pre><code>type(scope): description\n\n[optional body]\n\n[optional footer]\n</code></pre></p> <p>Types: - feat: New feature - fix: Bug fix - docs: Documentation changes - style: Code style changes - refactor: Code refactoring - test: Test updates - chore: Maintenance tasks</p>"},{"location":"contributing/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Update the README.md with details of changes if needed</li> <li>Update the documentation with details of changes if needed</li> <li>The PR must pass all CI checks</li> <li>The PR must be reviewed by at least one maintainer</li> <li>The PR should be rebased on the latest main branch</li> </ol>"},{"location":"contributing/#getting-help","title":"Getting Help","text":"<ul> <li>Open an issue for bugs or feature requests</li> <li>Join our community discussions</li> <li>Contact maintainers for guidance</li> </ul>"},{"location":"contributing/#license","title":"License","text":"<p>By contributing, you agree that your contributions will be licensed under the project's license. </p>"}]}